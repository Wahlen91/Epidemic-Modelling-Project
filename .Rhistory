mu.MLE
mu.MLE <- log(prod(x))/64
mu.MLE
(log(x)-mu.MLE)^2
sum((log(x)-mu.MLE)^2)
/64
y<- c(1,2,31,34)
p.hat <- round(sum(y)/203,5)
x <- c(11586,16417,217901,211863)
Claim.cost <- sum(x)/68
Eclaims.cost <- Claim.cost*p.hat*100
Eclaims.cost
mu.MLE <- log(prod(x))/64
LogNorm.sigma2.MLE <- sum((log(x)-mu.MLE)^2)/64
E.X <- exp(mu.MLE+1/2*sigma2.MLE)
E.X <- exp(LogNorm.mu.MLE+1/2*LogNorm.sigma2.MLE)
LogNorm.mu.MLE <- log(prod(x))/64
LogNorm.sigma2.MLE <- sum((log(x)-mu.MLE)^2)/64
E.X <- exp(LogNorm.mu.MLE+1/2*LogNorm.sigma2.MLE)
Claim.cost <- exp(LogNorm.mu.MLE+1/2*LogNorm.sigma2.MLE)
Eclaims.cost <- Claim.cost*p.hat*100
Eclaims.cost
Claim.cost <- exp(LogNorm.mu.MLE+LogNorm.sigma2.MLE/2)
Claim.cost <- sum(x)/68
Eclaims.cost <- Claim.cost*p.hat*100
LogNorm.mu.MLE <- log(prod(x))/64
LogNorm.sigma2.MLE <- sum((log(x)-mu.MLE)^2)/64
E.X <- exp(LogNorm.mu.MLE+1/2*LogNorm.sigma2.MLE)
E.X
log(E.X)
var(x)/(68-1)
var(x)
sum((x-mean(x))^2)
(x-mean(x))^2
x-mean(x)
alpha <- (sum(x)-x[1])/(sum(x)-length(x)*x[1])
Scale <- (length(x)*alpha-1)*x[1]/(length(x)*alpha)
alpha*Scale/(alpha-1)
alpha <- (sum(x)-x[1])/(sum(x)-numbObs*x[1])
numbObs <- 68
alpha <- (sum(x)-x[1])/(sum(x)-numbObs*x[1])
alpha
alpha <- (sum(x)-min(x))/(sum(x)-numbObs*x[1])
alpha
alpha*Scale/(alpha-1)
alpha*Scale/(alpha-1)*p.hat*100
alpha <- (sum(x)-x[1])/(sum(x)-length(x)*x[1])
alpha
Scale <- (length(x)*alpha-1)*x[1]/(length(x)*alpha)
alpha*Scale/(alpha-1)
alpha <- (sum(x)-x[1])/(sum(x)-length(x)*x[1])
Scale <- (length(x)*alpha-1)*x[1]/(length(x)*alpha)
alpha*Scale/(alpha-1)
df <- data.frame("x"=seq(from=1/alpha,to=1,length=1000) ,"y"=sapply(seq(from=1/alpha,to=1,length=1000), priceFunc))
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=x,y=450000), color="red", label="cc") +
scale_y_log10() +
xlab("Risk aversion") +
ylab("Premium price (log10 scale)") +
theme_bw()
which(df$y<450000)[1]
price <- df$y[241]
risk.adverse <- df$x[241]
print(c(as.numeric(risk.adverse), as.numeric(price)))
library(actuar)
priceFunc <- function(riskAdverse, Alpha=alpha, Theta=Scale){
return(
Theta*((riskAdverse*Alpha)/(Alpha*riskAdverse-1))
)
}
#######
# antag distortion funktion h(p)=p^gamma, där gamma är risk adversion
#######
#######
# with moments estimator
#######
alpha <- (sum(x)-x[1])/(sum(x)-length(x)*x[1])
Scale <- (length(x)*alpha-1)*x[1]/(length(x)*alpha)
alpha*Scale/(alpha-1)
df <- data.frame("x"=seq(from=1/alpha,to=1,length=1000) ,"y"=sapply(seq(from=1/alpha,to=1,length=1000), priceFunc))
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=x,y=450000), color="red", label="cc") +
scale_y_log10() +
xlab("Risk aversion") +
ylab("Premium price (log10 scale)") +
theme_bw()
which(df$y<450000)[1]
price <- df$y[241]
risk.adverse <- df$x[241]
print(c(as.numeric(risk.adverse), as.numeric(price)))
alpha*Scale/(alpha-1)
x <- x/y
x
alpha <- (sum(x)-x[1])/(sum(x)-length(x)*x[1])
alpha
Scale <- (length(x)*alpha-1)*x[1]/(length(x)*alpha)
Scale
alpha <- (sum(x)-min(x))/(sum(x)-length(x)*min(x))
alpha
Scale <- (length(x)*alpha-1)*x[1]/(length(x)*alpha)
Scale
library(actuar)
priceFunc <- function(riskAdverse, Alpha=alpha, Theta=Scale){
return(
Theta*((riskAdverse*Alpha)/(Alpha*riskAdverse-1))
)
}
df <- data.frame("x"=seq(from=1/alpha,to=1,length=1000) ,"y"=sapply(seq(from=1/alpha,to=1,length=1000), priceFunc))
price <- df$y[which(df$y<450000)[1]]
risk.adverse <- df$x[which(df$y<450000)[1]]
print(c(as.numeric(risk.adverse), as.numeric(price)))
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=x,y=450000), color="red", label="cc") +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10 scale)") +
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=seq(0,1,length=1000),y=450000), color="red", label="cc") +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10 scale)") +
theme_bw()
price <- df$y[which(df$y<450000)[1]]
risk.adverse <- df$x[which(df$y<450000)[1]]
print(c(as.numeric(risk.adverse), as.numeric(price)))
4.336365e+05
3.107569e-01
price.inflation <- df$y[which(df$y<450000/0.02)[1]]
risk.adverse <- df$x[which(df$y<450000/0.02)[1]]
risk.adverse.inflation <- df$x[which(df$y<450000/0.02)[1]]
print(c(as.numeric(risk.adverse.inflation), as.numeric(price.inflation)))
price <- df$y[which(df$y<450000/100)[1]]
risk.adverse <- df$x[which(df$y<450000/100)[1]]
print(c(as.numeric(risk.adverse), as.numeric(price)))
which(df$y<450000/0.02)[1]
which(df$y/0.02<450000
)
df$y/0.02
df$y
var(x)
sqrt(var(x))
0.05*sqrt(var(x))
sqrt(var(x))
x <- c(11586,16417,217901,211863)
mean(x)
sum((x-mean(x))^2)/(68-1)
price
price <- df$y[which(df$y<450000)[1]]
risk.adverse <- df$x[which(df$y<450000)[1]]
price
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=seq(0,1,length=1000),y=450000), color="red", label="cc") +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
theme(legend.position="left")+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=seq(0,1,length=1000),y=450000), color="red", label="cc") +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_fill_discrete()+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=seq(0,1,length=1000),y=450000), color="red") +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_colour_manual(values=c("black", "red"))+
theme_bw()
df <- data.frame("x"=seq(from=1/alpha,to=1,length=1000),
"y"=sapply(seq(from=1/alpha,to=1,length=1000), priceFunc),
"Konk"=rep(450000,length=1000))
ggplot(df)+
geom_line(aes(x=x, y=y, ))+
geom_line(aes(y=Konk)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_colour_manual(values=c("black", "red"))+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(y=Konk)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_colour_manual(values=c("black", "red"))+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=x, y=Konk)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_colour_manual(values=c("black", "red"))+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y, fill=Konk))+
geom_line(aes(x=x)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_colour_manual()+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y, fill=Konk))+
#geom_line(aes(x=x)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
scale_colour_manual()+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y, fill=Konk))+
#geom_line(aes(x=x)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y, colors=Konk))+
#geom_line(aes(x=x)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=x, y=Konk)) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_line(aes(x=x, y=Konk)) +
geom_text(aes(0,h,label = "konkurenters pris", vjust = -1))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(y=Konk)) +
#geom_text(aes(0,label = "konkurenters pris", vjust = -1))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(y=450000)) +
#geom_text(aes(0,label = "konkurenters pris", vjust = -1))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000)) +
#geom_text(aes(0,label = "konkurenters pris", vjust = -1))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
#geom_text(aes(0,label = "konkurenters pris", vjust = -1))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
geom_text(aes(0,450000,label = "konkurenters pris", vjust = -1))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
geom_text(aes(0,450000,label = "konkurenters pris", vjust = +2))
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
geom_text(aes(0.25,450000,label = "konkurenters pris", vjust = -1), size=1)
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
geom_text(aes(0.8,450000,label = "konkurenters pris", vjust = -1), size=3)
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
#scale_colour_manual(value)+
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
geom_text(aes(0.8,450000,label = "konkurenters pris", vjust = -1), size=3)
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
theme_bw()
ggplot(df)+
geom_line(aes(x=x, y=y))+
geom_hline(aes(yintercept=450000), colour="#BB0000", linetype="dashed") +
geom_text(aes(0.8,450000,label = "konkurenters pris", vjust = -1), size=3) +
scale_y_log10() +
xlab("Risk") +
ylab("Pris (log10)") +
theme_bw()
price
price <- df$y[which(df$y/(1-0.02)<450000)[1]]
price
risk.adverse <- df$x[which(df$y/(1-0.02)<450000)[1]]
risk.adverse
risk.adverse <- df$x[which(df$y/(1-0.02)<450000)[1]]
risk.adverse
risk.adverse <- df$x[which(df$y<450000)[1]]
risk.adverse
which(df$y<450000)
which(df$y/(1-0.02)<450000)
which(df$y/(0.98)<450000)
which(df$y<450000*0.98)
qpareto(0.025, alpha, Scale)
plot(0:1000, dpareto(0:1000, alpha, Scale))
plot(1:1000, dpareto(1:1000, alpha, Scale))
plot(1:2000, dpareto(1:2000, alpha, Scale))
plot(1:3000, dpareto(1:3000, alpha, Scale))
plot(1:10000, dpareto(1:10000, alpha, Scale))
qpareto(1-0.025, alpha, Scale)
\Sexpr{price}
price
x/y
var(x/y)
sqrt(var(x/y))
install.packages("coda")
install.packages("rjags")
# Load packages
library("MASS")
# Load data
load("Data/alldata.RData")
#alldata <- read.csv("Data/alldata.csv")
# Make data for g(t)
alldata$sin2 <- sin(2*pi*alldata$week/52)
alldata$sin4 <- sin(4*pi*alldata$week/52)
alldata$cos2 <- cos(2*pi*alldata$week/52)
alldata$cos4 <- cos(4*pi*alldata$week/52)
# Split the outbreak weeks into before and after as done in Bernard et al (2014)
alldata$o104wk.before <- as.numeric(alldata$o104wk == 1 & alldata$week_calender %in% 21:23)
alldata$o104wk.after <- as.numeric(alldata$o104wk == 1 & !alldata$week_calender %in% 21:23)
# Construct the model without age and sex stratification
model <- glm.nb(Cases ~ offset(log(Population)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 +
o104wk, data = alldata, link = "log")
################################################################################
model.Smooth <- glm.nb(Cases ~ offset(log(PopSmooth)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 +
o104wk, data = alldata, link = "log")
# Take out the estimates and respective Wald 95% confidence intervals
est <- cbind(Estimate = model$coefficients, confint.default(model))
#
est.Smooth <- cbind(Estimate = model.Smooth$coefficients, confint.default(model.Smooth))
# Exponentiate
round(exp(est), digits = 2)
round(exp(est.Smooth), digits=2)
# Model with age and sex stratification
model.as <- glm.nb(Cases ~ offset(log(Population)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk, data = alldata, link = "log")
################################################################################
model.as.Smooth <- glm.nb(Cases ~ offset(log(PopSmooth)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk, data = alldata, link = "log")
# Take out the estimates and respective Wald 95% confidence intervals
est.as <- cbind(Estimate = model.as$coefficients, confint.default(model.as))
est.as.Smooth <- cbind(Estimate = model.as.Smooth$coefficients, confint.default(model.as.Smooth))
# Exponentiate
round(exp(est.as), digits = 2)
round(exp(est.as.Smooth), digits=2)
# Model with age and sex stratification and split outbreak on before and after
model.as.ba <- glm.nb(Cases ~ offset(log(Population)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk.before + Age:Sex:o104wk.after,
data = alldata, link = "log")
################################################################################
model.as.ba.Smooth <- glm.nb(Cases ~ offset(log(PopSmooth)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk.before + Age:Sex:o104wk.after,
data = alldata, link = "log")
# Take out the estimates and respective Wald 95% confidence intervals
est.as.ba <- cbind(Estimate = model.as.ba$coefficients,
confint.default(model.as.ba.Smooth))
est.as.ba.Smooth <- csbind(Estimate = model.as.ba.Smooth$coefficients,
confint.default(model.as.ba.Smooth))
# Exponentiate
round(exp(est.as.ba), digits = 2)
round(exp(est.as.ba.Smooth), digits=2)
# change
#round(exp(est.as.ba), digits = 2)-round(exp(est.as.ba.Smooth), digits=2)
setwd("~/Desktop/GitHubHome/Epidemic-Modelling-Project")
# Load packages
library("MASS")
# Load data
load("Data/alldata.RData")
#alldata <- read.csv("Data/alldata.csv")
# Make data for g(t)
alldata$sin2 <- sin(2*pi*alldata$week/52)
alldata$sin4 <- sin(4*pi*alldata$week/52)
alldata$cos2 <- cos(2*pi*alldata$week/52)
alldata$cos4 <- cos(4*pi*alldata$week/52)
# Split the outbreak weeks into before and after as done in Bernard et al (2014)
alldata$o104wk.before <- as.numeric(alldata$o104wk == 1 & alldata$week_calender %in% 21:23)
alldata$o104wk.after <- as.numeric(alldata$o104wk == 1 & !alldata$week_calender %in% 21:23)
# Construct the model without age and sex stratification
model <- glm.nb(Cases ~ offset(log(Population)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 +
o104wk, data = alldata, link = "log")
################################################################################
model.Smooth <- glm.nb(Cases ~ offset(log(PopSmooth)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 +
o104wk, data = alldata, link = "log")
# Take out the estimates and respective Wald 95% confidence intervals
est <- cbind(Estimate = model$coefficients, confint.default(model))
#
est.Smooth <- cbind(Estimate = model.Smooth$coefficients, confint.default(model.Smooth))
# Exponentiate
round(exp(est), digits = 2)
round(exp(est.Smooth), digits=2)
# Model with age and sex stratification
model.as <- glm.nb(Cases ~ offset(log(Population)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk, data = alldata, link = "log")
################################################################################
model.as.Smooth <- glm.nb(Cases ~ offset(log(PopSmooth)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk, data = alldata, link = "log")
# Take out the estimates and respective Wald 95% confidence intervals
est.as <- cbind(Estimate = model.as$coefficients, confint.default(model.as))
est.as.Smooth <- cbind(Estimate = model.as.Smooth$coefficients, confint.default(model.as.Smooth))
# Exponentiate
round(exp(est.as), digits = 2)
round(exp(est.as.Smooth), digits=2)
# Model with age and sex stratification and split outbreak on before and after
model.as.ba <- glm.nb(Cases ~ offset(log(Population)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk.before + Age:Sex:o104wk.after,
data = alldata, link = "log")
################################################################################
model.as.ba.Smooth <- glm.nb(Cases ~ offset(log(PopSmooth)) + season + season:sin2 +
season:cos2 + season:sin4 + season:cos4 + Age + Sex +
Age:Sex:o104wk.before + Age:Sex:o104wk.after,
data = alldata, link = "log")
# Take out the estimates and respective Wald 95% confidence intervals
est.as.ba <- cbind(Estimate = model.as.ba$coefficients,
confint.default(model.as.ba.Smooth))
est.as.ba.Smooth <- csbind(Estimate = model.as.ba.Smooth$coefficients,
confint.default(model.as.ba.Smooth))
# Exponentiate
round(exp(est.as.ba), digits = 2)
round(exp(est.as.ba.Smooth), digits=2)
# change
#round(exp(est.as.ba), digits = 2)-round(exp(est.as.ba.Smooth), digits=2)
ResFun<- function(x){
# Function which extracts the deviance residuals and anscombe residuals
#
# x - glm (negbin) objects
# Extract deviance residuals
DevRes<- residuals(x,"deviance")
# Extract Anscombe residuals
AnsCombRes <- surveillance::anscombe.residuals(x,x$theta)
temp.df <- data.frame('DevianceRes'=DevRes,'AnscombeRes'=AnsCombRes)
return(temp.df)
}
Models <-c(model.Smooth,model.as.Smooth,model.as.ba.Smooth)
temp.ff <- lapply(Models,ResFun)
Models <-list(model.Smooth,model.as.Smooth,model.as.ba.Smooth)
temp.ff <- lapply(Models,ResFun)
head(temp.ff)
head(temp.ff[[1]][1:2])
